# Try to find AnyDSL Runtime library and include path.
# Once done this will define
#
# AnyDSL_runtime_DIR
# AnyDSL_runtime_LIBRARIES
# AnyDSL_runtime_INCLUDE_DIRS
# AnyDSL_runtime_FOUND

cmake_minimum_required(VERSION 3.1)

find_path(AnyDSL_runtime_DIR
    NAMES
        anydsl_runtime-config.cmake
    PATHS
        ${AnyDSL_runtime_DIR}
        $ENV{AnyDSL_runtime_DIR}
        ${CMAKE_CURRENT_LIST_DIR}
        "@CMAKE_CURRENT_BINARY_DIR@"
        "@CMAKE_INSTALL_PREFIX@"
    PATH_SUFFIXES
        share/anydsl/cmake
)

find_path(AnyDSL_runtime_ROOT_DIR
    NAMES
        cmake/anydsl_runtime-config.cmake.in
        src/anydsl_runtime.h
        src/anydsl_runtime.hpp
    PATHS
        ${AnyDSL_runtime_ROOT_DIR}
        "@CMAKE_CURRENT_SOURCE_DIR@"
        "@CMAKE_SOURCE_DIR@"
)

find_path(AnyDSL_runtime_INCLUDE_DIR
    NAMES
        anydsl_runtime.h
        anydsl_runtime.hpp
    PATHS
        ${AnyDSL_runtime_ROOT_DIR}/src
)
set(AnyDSL_runtime_INCLUDE_DIRS ${AnyDSL_runtime_INCLUDE_DIR})

if(NOT TARGET runtime)
    include(${AnyDSL_runtime_DIR}/anydsl_runtime-exports.cmake)
endif()

set(AnyDSL_runtime_LIBRARIES runtime;@CONF_RUNTIME_LIBRARIES@)
if(MSVC)
    set(AnyDSL_runtime_LIBRARIES ${AnyDSL_runtime_LIBRARIES} optimized msvcrt debug msvcrtd)
endif()

find_path(Impala_DIR
    NAMES impala-config.cmake
    PATHS ${Impala_DIR} $ENV{Impala_DIR} @Impala_DIR@ "@CMAKE_CURRENT_BINARY_DIR@/share/anydsl/cmake"
    PATH_SUFFIXES share/anydsl/cmake
)
find_package(Impala REQUIRED)
if(@RUNTIME_JIT@)
    find_package(LLVM REQUIRED)
    find_package(Thorin REQUIRED)
endif()
find_program(CLANG_BIN clang)
find_program(LLVM_AS_BIN llvm-as)
if(NOT CLANG_BIN)
    message(FATAL_ERROR "Could not find clang binary, it has to be in the PATH")
endif()
if(LLVM_AS_BIN)
    message(STATUS "Found llvm-as: ${LLVM_AS_BIN}")
    message(STATUS "Note: llvm-as version needs to match the required LLVM bitcode version from NVVM.")
else()
    message(STATUS "Could not find llvm-as binary.")
    message(STATUS "llvm-as is required to generate LLVM bitcode for NVVM.")
    message(STATUS "llvm-as version needs to match the required LLVM bitcode version from NVVM.")
endif()

# find python for post-patcher.py
find_package(PythonInterp REQUIRED)
message(STATUS "Python found: ${PYTHON_VERSION_STRING}")
set(PYTHON_BIN ${PYTHON_EXECUTABLE})

macro(anydsl_runtime_wrap outfiles)
    cmake_parse_arguments("PARGS" "" "INTERFACE;NAME" "CLANG_FLAGS;IMPALA_FLAGS;FILES" ${ARGN})
    if(NOT "${PARGS_UNPARSED_ARGUMENTS}" STREQUAL "")
        message(FATAL_ERROR "Unparsed arguments ${PARGS_UNPARSED_ARGUMENTS}")
    endif()

    # get last filename, and absolute filenames
    set(_infiles)
    foreach(_it ${PARGS_FILES})
        get_filename_component(_infile ${_it} ABSOLUTE)
        set(_infiles ${_infiles} ${_infile})
        set(_lastfile ${_it})
    endforeach()

    if(NOT PARGS_NAME)
        get_filename_component(_basename ${_lastfile} NAME_WE)
    else()
        set(_basename ${PARGS_NAME})
    endif()

    set(_llfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.ll)
    set(_objfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.o)

    set(_impala_platform
        ${AnyDSL_runtime_ROOT_DIR}/src/runtime.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_cpu.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_cuda.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_nvvm.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_opencl.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_amdgpu.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_thorin.impala)

    string(TOLOWER "${CMAKE_BUILD_TYPE}" _build_type)
    if("${_build_type}" STREQUAL "debug")
        set(_opt_flags "-g")
    else()
        set(_opt_flags "-O3")
    endif()

    set(_impala_flags -emit-llvm ${_opt_flags})
    foreach(flag ${IMPALA_FLAGS})
        if(flag MATCHES "--log-level")
            set(IMPALA_FLAGS_HAS_LOG_LEVEL TRUE)
        endif()
    endforeach()
    if(NOT IMPALA_FLAGS_HAS_LOG_LEVEL AND "${_build_type}" STREQUAL "debug")
        set(_impala_flags ${_impala_flags} "--log-level" "info")
    endif()
    if(PARGS_IMPALA_FLAGS)
        set(_impala_flags ${_impala_flags} ${PARGS_IMPALA_FLAGS})
    endif()

    set(_clang_flags ${_opt_flags})
    if(PARGS_CLANG_FLAGS)
        set(_clang_flags ${_clang_flags} ${PARGS_CLANG_FLAGS})
    endif()

    # generate .ll file and patch it
    set(_irfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.nvvm)
    add_custom_command(OUTPUT ${_llfile}
        COMMAND ${Impala_BIN} ${_impala_platform} ${_infiles} ${_impala_flags} -o ${_basename}
        COMMAND ${PYTHON_BIN} ${AnyDSL_runtime_ROOT_DIR}/post-patcher.py ${CMAKE_CURRENT_BINARY_DIR}/${_basename}
        COMMAND ${CMAKE_COMMAND} -D_irfile=${_irfile} -DLLVM_AS_BIN=${LLVM_AS_BIN} -P ${AnyDSL_runtime_ROOT_DIR}/cmake/check_llvmir.cmake
        COMMAND ${CMAKE_COMMAND} -D_basename=${_basename} -P ${AnyDSL_runtime_ROOT_DIR}/cmake/check_amdgpuir.cmake
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        DEPENDS ${Impala_BIN} ${PYTHON_BIN} ${AnyDSL_runtime_ROOT_DIR}/post-patcher.py ${_impala_platform} ${_infiles} VERBATIM)

    # generate C interface on request
    if(NOT ${PARGS_INTERFACE} STREQUAL "")
        add_custom_command(OUTPUT "${PARGS_INTERFACE}.h"
           COMMAND ${Impala_BIN} ${_impala_platform} ${_infiles} -emit-c-interface -o ${PARGS_INTERFACE}
           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
           DEPENDS ${Impala_BIN} ${_impala_platform} ${_infiles})
        set_source_files_properties("${PARGS_INTERFACE}.h" PROPERTIES GENERATED TRUE)
    endif()

    # run clang on the .ll file to get the .o
    add_custom_command(OUTPUT ${_objfile}
        COMMAND ${CLANG_BIN} ${_clang_flags} -fPIE -c -o ${_objfile} ${_llfile}
        DEPENDS ${_llfile} VERBATIM)

    set_source_files_properties(${_objfile} PROPERTIES EXTERNAL_OBJECT true GENERATED true LANGUAGE CXX)
    set(${outfiles} ${${outfiles}} ${_objfile})
endmacro()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(AnyDSL_runtime DEFAULT_MSG AnyDSL_runtime_DIR AnyDSL_runtime_LIBRARIES AnyDSL_runtime_INCLUDE_DIRS)

mark_as_advanced(AnyDSL_runtime_LIBRARIES AnyDSL_runtime_ROOT_DIR AnyDSL_runtime_INCLUDE_DIR)

# Try to find AnyDSL Runtime library and include path.
# Once done this will define
#
# AnyDSL_runtime_DIR
# AnyDSL_runtime_LIBRARY
# AnyDSL_runtime_INCLUDE_DIRS
# AnyDSL_runtime_FOUND

CMAKE_MINIMUM_REQUIRED ( VERSION 3.1 )

FIND_PATH ( AnyDSL_runtime_DIR
    NAMES
        anydsl_runtime-config.cmake
    PATHS
        ${AnyDSL_runtime_DIR}
        $ENV{AnyDSL_runtime_DIR}
        ${CMAKE_CURRENT_LIST_DIR}
        "@CMAKE_CURRENT_BINARY_DIR@"
        "@CMAKE_INSTALL_PREFIX@"
    PATH_SUFFIXES
        share/AnyDSL_runtime/cmake
)

FIND_PATH (AnyDSL_runtime_ROOT_DIR
    NAMES
        cmake/anydsl_runtime-config.cmake.in
        src/anydsl_runtime.h
        src/anydsl_runtime.hpp
    PATHS
        ${AnyDSL_runtime_ROOT_DIR}
        "@CMAKE_CURRENT_SOURCE_DIR@"
        "@CMAKE_SOURCE_DIR@"
)

FIND_PATH ( AnyDSL_runtime_INCLUDE_DIR
    NAMES
        anydsl_runtime.h
        anydsl_runtime.hpp
    PATHS
        ${AnyDSL_runtime_ROOT_DIR}/src
)
SET ( AnyDSL_runtime_INCLUDE_DIRS ${AnyDSL_runtime_INCLUDE_DIR} )

SET (AnyDSL_runtime_LIBS_DIR
    "${AnyDSL_runtime_DIR}/../../../@PROJ_LIBRARY_DIR@"
    "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@"
    "@CMAKE_ARCHIVE_OUTPUT_DIRECTORY@"
    # TODO: additionally use install prefix
)
# TODO: this should be @ANYDSL_RUNTIME_OUTPUT_NAME@
SET ( AnyDSL_runtime_LIBNAME runtime )
FIND_LIBRARY ( AnyDSL_runtime_LIBRARY_RELEASE
    NAMES ${AnyDSL_runtime_LIBNAME} "@CMAKE_RELEASE_PREFIX@${AnyDSL_runtime_LIBNAME}@CMAKE_RELEASE_POSTFIX@"
    PATHS ${AnyDSL_runtime_LIBS_DIR}
    PATH_SUFFIXES Release
)
FIND_LIBRARY ( AnyDSL_runtime_LIBRARY_DEBUG
    NAMES ${AnyDSL_runtime_LIBNAME} "@CMAKE_DEBUG_PREFIX@${AnyDSL_runtime_LIBNAME}@CMAKE_DEBUG_POSTFIX@"
    PATHS ${AnyDSL_runtime_LIBS_DIR}
    PATH_SUFFIXES Debug
)
IF ( AnyDSL_runtime_LIBRARY_RELEASE STREQUAL AnyDSL_runtime_LIBRARY_DEBUG )
    SET ( AnyDSL_runtime_LIBRARY ${AnyDSL_runtime_LIBRARY_RELEASE})
ELSE ()
    SET ( AnyDSL_runtime_LIBRARY
        optimized ${AnyDSL_runtime_LIBRARY_RELEASE}
        debug ${AnyDSL_runtime_LIBRARY_DEBUG}
    )
ENDIF ()

SET ( AnyDSL_runtime_LIBRARIES ${AnyDSL_runtime_LIBRARY} "@CONF_RUNTIME_LIBRARIES@" )

MACRO ( AnyDSL_runtime_files outfiles )
    cmake_parse_arguments("PARGS" "" "BACKEND;FRONTEND" "" ${ARGN})
    IF ( NOT "${PARGS_UNPARSED_ARGUMENTS}" STREQUAL "" )
        MESSAGE ( FATAL_ERROR "Unparsed arguments ${PARGS_UNPARSED_ARGUMENTS}" )
    ENDIF ()

	STRING ( TOLOWER ${PARGS_FRONTEND} _frontend )
	STRING ( TOLOWER ${PARGS_BACKEND} _backend )

	IF ( NOT _frontend STREQUAL "impala" )
		MESSAGE ( ERROR "Unsupported frontend: ${_frontend} (supported frontends: impala)" )
	ENDIF ()

    SET ( _backend_instrinsics ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_${_backend}.impala )

	IF (NOT EXISTS ${_backend_instrinsics})
		MESSAGE ( WARNING "Unsupported backend ${_backend} for frontend ${_frontend}")
		SET ( _backend_instrinsics )
	ENDIF ()

    SET ( ${outfiles} ${${outfiles}}
        ${AnyDSL_runtime_ROOT_DIR}/src/runtime.impala
        ${AnyDSL_runtime_ROOT_DIR}/platforms/intrinsics_thorin.impala
		${_backend_instrinsics} )
ENDMACRO ()

INCLUDE ( FindPackageHandleStandardArgs )
find_package_handle_standard_args( AnyDSL_runtime DEFAULT_MSG AnyDSL_runtime_DIR AnyDSL_runtime_LIBRARIES AnyDSL_runtime_INCLUDE_DIRS )

MARK_AS_ADVANCED ( AnyDSL_runtime_LIBRARY AnyDSL_runtime_LIBRARY_DEBUG AnyDSL_runtime_LIBRARY_RELEASE AnyDSL_runtime_LIBS_DIR AnyDSL_runtime_LIBNAME AnyDSL_runtime_ROOT_DIR AnyDSL_runtime_INCLUDE_DIR )

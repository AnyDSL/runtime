if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset "${Esc}[m")
  set(BoldWhite   "${Esc}[1;37m")
endif()


string(REPLACE "," ";" HLS_FLAGS_LIST "${HLS_FLAGS}")
list(GET HLS_FLAGS_LIST 0 SOC)
list(GET HLS_FLAGS_LIST 1 SYNTHESIS)
list(GET HLS_FLAGS_LIST 2 FPGA_PART)
list(GET HLS_FLAGS_LIST 3 PROFILER)
list(GET HLS_FLAGS_LIST 4 HW_EMULATION)
list(GET HLS_FLAGS_LIST 5 GMEM_BANKS_OPT)
list(GET HLS_FLAGS_LIST 6 COMPILATION_JOBS)


# Vitis info
set(VITIS_MAJOR_VERSION  @VITIS_MAJOR_VERSION@)
set(VITIS_MINOR_VERSION  @VITIS_MINOR_VERSION@)

# HLS tools
set(AMD_HLS              @Xilinx_HLS@)
set(AMD_VPP              @Xilinx_VPP@)
set(AMD_PLATFORM_INFO    @Xilinx_PLATFORM_INFO@)
set(AMD_KERNEL_INFO      @Xilinx_KERNEL_INFO@)
set(AMD_EMU_CONFIG       @Xilinx_EMU_CONFIG@)

# AIE tools
set(AMD_AIE_COMPILER      @Xilinx_AIE_COMPILER@)
set(AMD_AIE_SIMULATOR     @Xilinx_AIE_SIMULATOR@)
set(AMD_AIE_X86SIMULATOR  @Xilinx_AIE_X86SIMULATOR@)
set(AMD_AIE_INCLUDE_DIRS  @Xilinx_AIE_INCLUDE_DIRS@)


# Extracting FPGA platform and Board PART from FPGA_PART macro
if(AMD_PLATFORM_INFO)
	execute_process(COMMAND ${AMD_PLATFORM_INFO} --list OUTPUT_VARIABLE PLATFORM_LIST)
    string(REGEX MATCHALL "\"baseName\": [^, \t]+" matches "${PLATFORM_LIST}")
    string(REGEX REPLACE "\"baseName\": |[\"]" "" PLATFORMS_ "${matches}")
    string(TOLOWER ${FPGA_PART} FPGA_PART)
    set(PLATFORM_NAME)

    foreach(PLATFORM_ ${PLATFORMS_})
        if(${PLATFORM_} MATCHES ${FPGA_PART})
            message(STATUS "Platform ${PLATFORM_} found for ${FPGA_PART}.")
	    execute_process(COMMAND ${AMD_PLATFORM_INFO} --json=hardwarePlatform.board.part --platform ${PLATFORM_} OUTPUT_VARIABLE BOARD_PART)
	    execute_process(COMMAND ${AMD_PLATFORM_INFO} --json=file --platform ${PLATFORM_} OUTPUT_VARIABLE PLATFORM_XPFM_ADDR)
            string(REPLACE "\n" "" BOARD_PART ${BOARD_PART})
	    string(REPLACE "\n" "" PLATFORM_XPFM_ADDR ${PLATFORM_XPFM_ADDR})
            set(FPGA_PART ${BOARD_PART})
            set(PLATFORM_NAME ${PLATFORM_})
            break()
        endif()
    endforeach()

    if(NOT BOARD_PART)
        message(STATUS "No platform found!")
    else()
        message(STATUS "BOARD_PART: ${BOARD_PART} \n ")
    endif()
endif()


# VPP configs

set(VPP_opt "-O3")
set(VPP_kernel "-k")
set(VPP_platform "--platform=")
set(VPP_target "-t")
set(VPP_link "--link")
set(VPP_out "-o")
set(VPP_compile "-c")
set(VPP_input "--input_files")
set(VPP_config "--config=")
set(VPP_debug "-g")
set(VPP_package "--package")
set(VPP_mode "--mode")
set(VPP_comp_jobs "--hls.jobs")
set(VPP_link_synth_jobs "--vivado.synth.jobs")
set(VPP_link_impl_jobs "--vivado.impl.jobs")
set(SAVE_REPORTS "--save-temps")

string(TOLOWER ${HW_EMULATION} HW_EMULATION)
if(SYNTHESIS STREQUAL "on")
    if(HW_EMULATION STREQUAL "on")
        string(APPEND VPP_target "hw_emu")
    else()
        string(APPEND VPP_target "hw")
    endif()
else()
	#if(AI_ENGINE)
	#string(APPEND VPP_target "x86sim")
	#endif()
    string(APPEND VPP_target "sw_emu")
endif()

if(EXISTS ${_basename}_graph.cxx)
    message(STATUS "Found AI Engine graph code.")
    set(AI_ENGINE ON)
endif()

#AIE compiler config
if(AI_ENGINE)

    set(AIE_CC         ${AMD_AIE_COMPILER})
    set(AIE_XCHESS     "--Xchess=")
    set(AIE_STACK_SIZE "--stacksize=")
    set(AIE_HEAP_SIZE  "--heapsize=")
    set(AIE_XPREPROC   "--Xpreproc=")
    set(AIE_TARGET "${VPP_target}")

    #
    string(REPLACE "sw_emu" "x86sim" AIE_TARGET "${AIE_TARGET}")
    # on aiecompiler for emulating we actually need to build for hardware
    string(REPLACE "hw_emu" "hw" AIE_TARGET "${AIE_TARGET}")
    string(REPLACE "-t" "--target=" AIE_TARGET "${AIE_TARGET}")



    # Adjusting AIE compiler flags according to Vitis version
    set(AIE_VAR_FLAGS ${AIE_XCHESS} ${AIE_STACK_SIZE} ${AIE_HEAP_SIZE} ${AIE_XPREPROC})
    if((VITIS_MAJOR_VERSION EQUAL 2023 AND VITIS_MINOR_VERSION EQUAL 2) OR (VITIS_MAJOR_VERSION GREATER 2023))
        set(AIE_CC "${AMD_VPP} --mode aie")

	foreach(flag IN LIST ${AIE_VAR_FLAGS})
            string(REPLACE "--" "--aie." flag "${flag}")
	endforeach()

	list(GET AIE_VAR_FLAGS 0 AIE_XCHESS)
	list(GET AIE_VAR_FLAGS 1 AIE_STACK_SIZE)
	list(GET AIE_VAR_FLAGS 2 AIE_HEAP_SIZE)
	list(GET AIE_VAR_FLAGS 3 AIE_XPREPROC)

	if(AIE_TARGET STREQUAL "sw_emu")
            set(AIE_TARGET "x86")
	endif()

	# correct the flag
	if(HW_EMULATION STREQUAL "on")
	    string(REPLACE "hw" "hw_emu" AIE_TARGET "${AIE_TARGET}")
        endif()


    endif()

    set(AIE_WORK_DIR_VAL   "./Work")
    set(AIE_INPUT_FILES    "${_basename}_graph.cxx")

    string(APPEND AIE_STACK_SIZE "2048")
    string(APPEND AIE_HEAP_SIZE  "2048")
    string(APPEND AIE_XCHESS "main:darts.xargs=-nb")
    string(APPEND AIE_XPREPROC "-D__AIESIM__")
    set(PROFILING_FLAGS "${PROFILING_FLAGS} --verbose --event-trace-port=gmio --event-trace=runtime --num-trace-streams=1 --xlopt=0")

    # flags and their values must be cleared when they are not used
    if(NOT PROFILER)
        set(PROFILING_FLAGS "")
	set(APPEND AIE_XPREPROC "")
    endif()

    if((SYNTHESIS) OR (HW_EMULATION))
        set(AIE_XPREPROC "")
    endif()
    set(AIE_PLATFORM "${VPP_platform}${PLATFORM_XPFM_ADDR}")
    # cxx -> libadf.a 
    execute_process(COMMAND ${AIE_CC} ${AIE_INPUT_FILES} ${AIE_TARGET} ${AIE_PLATFORM} 
        --include=${AMD_AIE_INCLUDE_DIRS} ${AIE_STACK_SIZE} ${AIE_HEAP_SIZE} ${PROFILING_FLAGS}
	--workdir=${AIE_WORK_DIR_VAL}
	${AIE_XPREPROC}
	COMMAND_ECHO STDOUT)
endif()


set(kernel_workspace "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${_basename}_${kernel}/xoFlow")
set(PROJECT_NAME "anydsl_fpga")
# ${_basename}.hls -> ${_basename}_hls.cpp
if(EXISTS ${_basename}.hls)
    execute_process(COMMAND cp ${_basename}.hls ${_basename}_hls.cpp)
    execute_process(COMMAND echo "int main() { return 0; }" OUTPUT_FILE ${_basename}_tb.cpp)
    execute_process(COMMAND awk -F "[ (]+" "/void .*;/{ ORS=\";\"; print $2 }" ${_basename}.hls
                    COMMAND awk "{ ORS=\"\"; sub(/;$/,\"\"); print }" OUTPUT_VARIABLE kernels)

    list(FIND kernels "hls_top" top_module)
    list(GET kernels ${top_module} kernel)
    string(CONCAT tcl_script "set project_name    \"${PROJECT_NAME}\"\n"
                            "set kernel_name      \"${kernel}\"\n"
                            "set kernel_file      \"${_basename}_hls.cpp\"\n"
                            "set kernel_testbench \"${_basename}_tb.cpp\"\n"
                            "set solution         \"${_basename}_${kernel}\"\n"
                            "set xoflow_path      \"${CMAKE_CURRENT_BINARY_DIR}/$project_name/$solution/xoFlow\"\n"
                            "set kernel_platform  \"${FPGA_PART}\"\n"
                            "\n"
                            "switch $kernel_platform {\n"
                            "   u50 {\n"
                            "       set kernel_platform \"xcu50-fsvh2104-2-e\"\n"
                            "   }\n"
                            "   u200 {\n"
                            "       set kernel_platform \"xcu200-fsgd2104-2-e\"\n"
                            "   }\n"
                            "   u250 {\n"
                            "       set kernel_platform \"xcu250-figd2104-2L-e\"\n"
                            "   }\n"
                            "   u280 {\n"
                            "       set kernel_platform \"xcu280-fsvh2892-2L-e\"\n"
                            "   }\n"
                            "   default {\n"
                            "       set kernel_platform $kernel_platform\n"
                            "   }\n"
                            "}\n"
                            "\n"
                            "open_project -reset $project_name\n"
                            "set_top $kernel_name\n"
                            "add_files -cflags {-DNO_SYNTH} $kernel_file\n"
                            "add_files -tb $kernel_testbench\n"
                            "open_solution -flow_target vivado -reset $solution\n"
                            "set lower $kernel_platform\n"
                            "set_part $kernel_platform\n"
                            "create_clock -period 10 -name default\n"
                            "csim_design -ldflags {-lrt -B/usr/lib/x86_64-linux-gnu/} -clean\n"
                            "\n"
                            "set lower ${SYNTHESIS}\n"
                            "if [string match {on} ${SYNTHESIS}] {\n"
                            "    if [string match {hls_top} $kernel_name] {\n"
                            "        if [string match {on} ${SOC}] {\n"
                            "            puts { **** HW synthesis for SoC **** }\n"
                            "            csynth_design\n"
                            "            get_clock_period\n"
                            "            export_design -format ip_catalog -evaluate verilog\n"
                            "        } else {\n"
                            "            puts { **** HW synthesis for HPC **** }\n"
                            "            file mkdir xoFlow\n"
                            "            config_compile -name_max_length 256 -pipeline_loops 64\n"
                            "            config_schedule -enable_dsp_full_reg\n"
                            "            csynth_design\n"
                            "            export_design -flow syn -format xo \\\n"
                            "            -output $xoflow_path/$kernel_name.xo\n"
                            "        }\n"
                            "    }\n"
                            "exit\n"
                            "} else {\n"
                            "    puts { **** HW sysnthesis is Disabled **** }\n"
                            "    exit\n"
                            "}\n")



    string(APPEND VPP_comp_jobs "=${COMPILATION_JOBS}")
    file(WRITE ${kernel_workspace}/config_profile.cfg "[profile]")
    if(PROFILER AND (SYNTHESIS STREQUAL "on"))
        # Generating a runime profiling configuration file
        string(CONCAT XRT_INI "[Debug]\n"
        "opencl_summary=true\n"
        "opencl_trace=true\n"
        "power_profile=true\n"
        "data_transfer_trace=coarse\n")
        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xrt.ini ${XRT_INI})

        # Generating a compile-time profiling configuration file
        string(CONCAT CONFIG_PROFILE "\n"
        "data=all:all:all\n"
        "memory=all\n"
        "stall=all:all\n"
        "exec=all:all\n"
        "aie=all\n"
        "\n"
        "[advanced]\n"
        "param=compiler.deadlockDetection=1\n")
        file(APPEND ${kernel_workspace}/config_profile.cfg ${CONFIG_PROFILE})

        string(APPEND VPP_platform "${PLATFORM_NAME}")

        set(COMPILING_PROFILE_CONFIG ${VPP_config}${kernel_workspace}/config_profile.cfg)
	# Compiling for HPC with profiling
	# cpp -> xo
	message(STATUS "Compiling for profiling")
	execute_process(COMMAND ${AMD_VPP} ${VPP_debug} ${SAVE_REPORTS} ${VPP_target} ${VPP_opt} ${VPP_platform}
		                ${VPP_comp_jobs}
                                ${VPP_compile} ${VPP_kernel} ${kernel} ${VPP_input} ${_basename}_hls.cpp
				${VPP_out} ${kernel_workspace}/${kernel}.xo ${COMPILING_PROFILE_CONFIG}
				COMMAND_ECHO STDOUT)
    elseif((NOT SOC) AND (NOT PROFILER) AND (SYNTHESIS STREQUAL "on"))
        string(APPEND VPP_platform "${PLATFORM_NAME}")
	# Compiling for HPC without profiling
	# cpp -> xo
	message(STATUS "Compiling")
	execute_process(COMMAND ${AMD_VPP} ${VPP_target} ${VPP_opt} ${SAVE_REPORTS} ${VPP_platform}
		                ${VPP_comp_jobs}
                                ${VPP_compile} ${VPP_kernel} ${kernel} ${VPP_input} ${_basename}_hls.cpp
                                ${VPP_out} ${kernel_workspace}/${kernel}.xo
				COMMAND_ECHO STDOUT)
    elseif(SOC AND (NOT PROFILER))
        execute_process(COMMAND echo "${tcl_script}" OUTPUT_FILE ${_basename}_${kernel}.tcl)
        # Compiling with vivado/Vitis_HLS
	# The script also supports HPC compilation but currently it is triggered only for a SoC flow.
        # TCL script skips any compilation withous synthesis
	message(STATUS "Executing the TCL script")
	execute_process(COMMAND ${AMD_HLS} -f ${_basename}_${kernel}.tcl)
    endif()

    if(AMD_KERNEL_INFO AND (SYNTHESIS STREQUAL "on"))
	execute_process(COMMAND ${AMD_KERNEL_INFO} ${kernel_workspace}/${kernel}.xo OUTPUT_VARIABLE KERNEL_INFO)
        string(REGEX MATCHALL "${kernel}_[0-9]+" arg_matches "${KERNEL_INFO}")
    endif()

    if(NOT SOC AND BOARD_PART AND (${kernel} STREQUAL "hls_top"))
        message(STATUS "Integrating ${kernel} into ${PLATFORM_NAME}")

	#string(APPEND VPP_platform "${PLATFORM_NAME}")
        file(WRITE ${kernel_workspace}/config_connectivity.cfg "[connectivity]\n")
        if(GMEM_BANKS_OPT)
            set(arg_num 0)
            foreach(arg ${arg_matches})
                file(APPEND ${kernel_workspace}/config_connectivity.cfg "sp=${kernel}_1.${arg}:DDR[${arg_num}]\n")
                math(EXPR arg_num "${arg_num}+1")
            endforeach()
        endif()

        set(EM_CONFIG_FILE "")

        if(NOT PROFILER)
            unset(VPP_debug)
        endif()

        if(SYNTHESIS STREQUAL "on")

	    set(AIE_LIB_ADF "")
            if(AI_ENGINE)
	        set(AIE_LIB_ADF "./libadf.a")
	    endif()

            if(HW_EMULATION STREQUAL "on")
		execute_process(COMMAND ${AMD_EMU_CONFIG} --platform ${PLATFORM_NAME})
                set(EM_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/emconfig.json)
                string(APPEND VPP_out "${kernel_workspace}/${kernel}_hw_emu.xsa")
            elseif(HW_EMULATION STREQUAL "off")
                string(APPEND VPP_out "${kernel_workspace}/${kernel}_hw.xsa")
            endif()
        elseif(SYNTHESIS STREQUAL "off")
            execute_process(COMMAND ${AMD_EMU_CONFIG} --platform ${PLATFORM_NAME})
            set(EM_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/emconfig.json)
            string(APPEND VPP_out "${kernel_workspace}/${kernel}.xo")
            set(VPP_flags ${VPP_target} ${VPP_opt} ${SAVE_REPORTS} ${VPP_platform} ${VPP_out})

	    # Compiling (just for software emulation)
	    message(STATUS "Compiling for sw_emu")
	    execute_process(COMMAND ${AMD_VPP} ${VPP_flags} ${VPP_compile} -DNO_SYNTH ${VPP_kernel} ${kernel}
                                    ${VPP_input} ${_basename}_hls.cpp ${VPP_config} ${kernel_workspace}/config_connectivity.cfg
		                    COMMAND_ECHO STDOUT)
            set(VPP_out "-o${kernel_workspace}/${kernel}_sw_emu.xsa")
        endif()

	# Adjust linking flags
	string(APPEND VPP_link_synth_jobs "=${COMPILATION_JOBS}")
        string(APPEND VPP_link_impl_jobs "=${COMPILATION_JOBS}")

	if(PROFILER)
            set(VPP_flags ${VPP_target} ${VPP_opt} ${SAVE_REPORTS} ${VPP_link_synth_jobs} ${VPP_link_impl_jobs} ${VPP_platform} ${VPP_out})
            file(READ "${kernel_workspace}/config_profile.cfg" CONFIG_PROFILE_CONTENT)
            string(REPLACE "param=compiler.deadlockDetection=1" "param=compiler.systemDeadlockDetection=enable"
                   CONFIG_PROFILE_CONTENT "${CONFIG_PROFILE_CONTENT}")
            file(WRITE ${kernel_workspace}/linking_config_profile.cfg ${CONFIG_PROFILE_CONTENT})
            set(LINKING_PROFILE_CONFIG ${VPP_config}${kernel_workspace}/linking_config_profile.cfg)
	else()
            set(VPP_flags ${VPP_target} ${VPP_opt} ${VPP_link_synth_jobs} ${VPP_link_impl_jobs} ${VPP_platform} ${VPP_out})
            set(LINKING_PROFILE_CONFIG "")
	endif()

	set(LINKING_AIE_PL_CONFIG ${VPP_config}${CMAKE_CURRENT_BINARY_DIR}/${_basename}.cfg)
	set(CONNECTIVITY_CONFIG ${VPP_config}${kernel_workspace}/config_connectivity.cfg)
	if(NOT AI_ENGINE)
	    set(LINKING_AIE_PL_CONFIG "")
	    set(TOP_KERNEL_NAME ${VPP_kernel} ${kernel}) 
        else()
	    set(TOP_KERNEL_NAME "")
        endif()

	set(OBJ_ARCHIVE ${kernel_workspace}/${kernel}.xo ${AIE_LIB_ADF})
	# Linking (.xo -> .xsa)
	message(STATUS "Linking")
	execute_process(COMMAND ${AMD_VPP} ${VPP_flags} ${VPP_debug} ${VPP_link} ${OBJ_ARCHIVE}
		                ${TOP_KERNEL_NAME}
                                ${LINKING_AIE_PL_CONFIG}
				${LINKING_PROFILE_CONFIG}
                                ${CONNECTIVITY_CONFIG}
				COMMAND_ECHO STDOUT)

	# Packaging (.xsa & libadf.a -> .xclbin)
        message(STATUS "Packaging")
	string(REPLACE "-t" "" target "${VPP_target}")
	set(OBJ_ARCHIVE ${kernel_workspace}/${kernel}_${target}.xsa ${AIE_LIB_ADF})
	string(REPLACE ".xsa" ".xclbin" VPP_out "${VPP_out}")
	execute_process(COMMAND ${AMD_VPP} ${VPP_package} ${VPP_target} ${VPP_platform} ${OBJ_ARCHIVE} ${VPP_out} --package.boot_mode=ospi
		        COMMAND_ECHO STDOUT)

	# Copy generated xclbin to application directory
        file(MAKE_DIRECTORY "${kernel}_xlbin")
        file(GLOB XCLBIN_FILE ${kernel_workspace}/${kernel}_*.xclbin)
        file(COPY ${EM_CONFIG_FILE} ${XCLBIN_FILE} DESTINATION "${kernel}_xlbin")

        if(VPP_target STREQUAL "-tsw_emu")
            list(FILTER XCLBIN_FILE INCLUDE REGEX "sw_emu")
        elseif(VPP_target STREQUAL "-thw_emu")
            list(FILTER XCLBIN_FILE INCLUDE REGEX "hw_emu")
        else()
            list(FILTER XCLBIN_FILE INCLUDE REGEX "hw")
        endif()
        message(STATUS ${XCLBIN_FILE})
        execute_process(COMMAND cp "${XCLBIN_FILE}" "${_basename}.xclbin")
    endif()

    string(TOLOWER ${SYNTHESIS} SYNTHESIS)
    if(NOT SOC AND (${SYNTHESIS} STREQUAL "off"))
        message(STATUS "${BoldWhite}XCL_EMULATION_MODE=sw_emu is required${ColourReset}")
    else()
        string(REGEX REPLACE "-t([^ ]*)" "\\1"  VPP_target ${VPP_target})
        if(NOT ${VPP_target} STREQUAL "hw")
            message(STATUS "${BoldWhite}XCL_EMULATION_MODE=${VPP_target} is required${ColourReset}")
        endif()
        if(PROFILER)
            message(STATUS "${BoldWhite} Runtime profiling: vitis_analyzer timeline_trace.csv${ColourReset}")
        endif()
    endif()
endif()

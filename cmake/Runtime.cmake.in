cmake_minimum_required(VERSION 3.1)

include(CMakeParseArguments)

list(APPEND ANYDSL_RUNTIME_LIBRARIES "@CONF_RUNTIME_LIBRARIES@")

# find required binaries: impala, clang, llvm-as
find_program(IMPALA_BIN impala)
find_program(CLANG_BIN clang)
find_program(LLVM_AS_BIN llvm-as)
if(NOT IMPALA_BIN)
    message(FATAL_ERROR "Could not find impala binary, it has to be in the PATH")
endif()
if(NOT CLANG_BIN)
    message(FATAL_ERROR "Could not find clang binary, it has to be in the PATH")
endif()
if(LLVM_AS_BIN)
    message(STATUS "Found llvm-as: ${LLVM_AS_BIN}")
    message(STATUS "Note: llvm-as version needs to match the required LLVM bitcode version from NVVM.")
else()
    message(STATUS "Could not find llvm-as binary.")
    message(STATUS "llvm-as is required to generate LLVM bitcode for NVVM.")
    message(STATUS "llvm-as version needs to match the required LLVM bitcode version from NVVM.")
endif()

# find python for post-patcher.py
find_package(PythonInterp REQUIRED)
message(STATUS "Python found: ${PYTHON_VERSION_STRING}")
set(PYTHON_BIN ${PYTHON_EXECUTABLE})

string(TOLOWER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)
if("${BUILD_TYPE}" STREQUAL "debug")
    set(OPT_FLAGS "-g")
else()
    set(OPT_FLAGS "-O3")
endif()

macro(anydsl_runtime_wrap outfiles)
    cmake_parse_arguments("PARGS" "" "" "CLANG_FLAGS;IMPALA_FLAGS;FILES" ${ARGN})
    if(NOT "${PARGS_UNPARSED_ARGUMENTS}" STREQUAL "")
        message(FATAL_ERROR "Unparsed arguments ${PARGS_UNPARSED_ARGUMENTS}")
    endif()

    # get last filename, and absolute filenames
    set(_infiles)
    foreach(_it ${PARGS_FILES})
        get_filename_component(_infile ${_it} ABSOLUTE)
        set(_infiles ${_infiles} ${_infile})
        set(_lastfile ${_it})
    endforeach()

    # add all input files as one impala job
    get_filename_component(_basename ${_lastfile} NAME_WE)
    set(_llfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.ll)
    set(_objfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.o)

    set(_impala_platform
        ${ANYDSL_RUNTIME_DIR}/src/runtime.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics_cpu.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics_cuda.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics_nvvm.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics_opencl.impala
        ${ANYDSL_RUNTIME_DIR}/platforms/intrinsics_thorin.impala)

    set(_impala_flags -emit-llvm ${OPT_FLAGS})
    if(PARGS_IMPALA_FLAGS)
        set(_impala_flags ${_impala_flags} ${PARGS_IMPALA_FLAGS})
    endif()

    set(_clang_flags ${OPT_FLAGS})
    if(PARGS_CLANG_FLAGS)
        set(_clang_flags ${_clang_flags} ${PARGS_CLANG_FLAGS})
    endif()

    # generate .ll file and patch it
    set(_irfile ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.nvvm)
    add_custom_command(OUTPUT ${_llfile}
        COMMAND ${IMPALA_BIN} ${_impala_platform} ${_infiles} ${_impala_flags}
        COMMAND ${PYTHON_BIN} ${ANYDSL_RUNTIME_DIR}/post-patcher.py ${CMAKE_CURRENT_BINARY_DIR}/${_basename}
        COMMAND ${CMAKE_COMMAND} -D_irfile=${_irfile} -DLLVM_AS_BIN=${LLVM_AS_BIN} -P ${ANYDSL_RUNTIME_DIR}/cmake/check_llvmir.cmake
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        DEPENDS ${IMPALA_BIN} ${PYTHON_BIN} ${ANYDSL_RUNTIME_DIR}/post-patcher.py ${_impala_platform} ${_infiles} VERBATIM)

    # run clang on the .ll file to get the .o
    add_custom_command(OUTPUT ${_objfile}
        COMMAND ${CLANG_BIN} ${_clang_flags} -c -o ${_objfile} ${_llfile}
        DEPENDS ${_llfile} VERBATIM)

    set_source_files_properties(${_objfile} PROPERTIES EXTERNAL_OBJECT true GENERATED true LANGUAGE CXX)
    set(${outfiles} ${${outfiles}} ${_objfile})
endmacro()

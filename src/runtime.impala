extern "C" {
    fn "anydsl_info" runtime_info() -> ();

    fn "anydsl_alloc"          runtime_alloc(i32, i64) -> &i8;
    fn "anydsl_alloc_host"     runtime_alloc_host(i32, i64) -> &i8;
    fn "anydsl_alloc_unified"  runtime_alloc_unified(i32, i64) -> &i8;
    fn "anydsl_get_device_ptr" runtime_get_device_ptr(i32, &i8) -> &i8;
    fn "anydsl_release"        runtime_release(i32, &i8) -> ();
    fn "anydsl_release_host"   runtime_release_host(i32, &i8) -> ();

    fn "anydsl_copy" runtime_copy(i32, &i8, i64, i32, &i8, i64, i64) -> ();

    fn "anydsl_random_val"  random_val() -> f32;
    fn "anydsl_random_seed" random_seed(u32) -> ();

    fn "anydsl_get_micro_time"  get_micro_time() -> i64;
    fn "anydsl_get_kernel_time" get_kernel_time() -> i64;

    fn "anydsl_print_char"   print_char(u8) -> ();
    fn "anydsl_print_short"  print_short(i16) -> ();
    fn "anydsl_print_int"    print_int(i32) -> ();
    fn "anydsl_print_long"   print_long(i64) -> ();
    fn "anydsl_print_float"  print_float(f32) -> ();
    fn "anydsl_print_double" print_double(f64) -> ();
    fn "anydsl_print_string" print_string(&[u8]) -> ();
}

fn runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }

struct Buffer {
    device: i32,
    data: &[i8]
}

fn alloc(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc(dev, size as i64) as &[i8]
    }
}
fn alloc_host(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc_host(dev, size as i64) as &[i8]
    }
}
fn alloc_unified(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc_unified(dev, size as i64) as &[i8]
    }
}
fn release(a: Buffer) -> () { runtime_release(a.device, a.data as &i8) }

fn alloc_cpu(size: i32) -> Buffer { alloc(0, size) }
fn alloc_cuda(dev: i32, size: i32) -> Buffer { alloc(runtime_device(1, dev), size) }
fn alloc_cuda_host(dev: i32, size: i32) -> Buffer { alloc_host(runtime_device(1, dev), size) }
fn alloc_cuda_unified(dev: i32, size: i32) -> Buffer { alloc_unified(runtime_device(1, dev), size) }
fn alloc_opencl(dev: i32, size: i32) -> Buffer { alloc(runtime_device(2, dev), size) }
fn alloc_opencl_unified(dev: i32, size: i32) -> Buffer { alloc_unified(runtime_device(2, dev), size) }

fn copy(a: Buffer, b: Buffer, size: i32) -> () {
    runtime_copy(a.device, a.data as &i8, 0i64, b.device, b.data as &i8, 0i64, size as i64)
}

fn copy_offset(a: Buffer, off_a: i32, b: Buffer, off_b: i32, size: i32) -> () {
    runtime_copy(a.device, a.data as &i8, off_a as i64, b.device, b.data as &i8, off_b as i64, size as i64)
}

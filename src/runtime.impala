extern "C" {
    fn "anydsl_info" runtime_info() -> ();

    fn "anydsl_alloc"          runtime_alloc(i32, i64) -> &[i8];
    fn "anydsl_alloc_host"     runtime_alloc_host(i32, i64) -> &[i8];
    fn "anydsl_alloc_unified"  runtime_alloc_unified(i32, i64) -> &[i8];
    fn "anydsl_copy"           runtime_copy(i32, &[i8], i64, i32, &[i8], i64, i64) -> ();
    fn "anydsl_get_device_ptr" runtime_get_device_ptr(i32, &[i8]) -> &[i8];
    fn "anydsl_release"        runtime_release(i32, &[i8]) -> ();
    fn "anydsl_release_host"   runtime_release_host(i32, &[i8]) -> ();
    fn "anydsl_synchronize"    runtime_synchronize(i32) -> ();

    fn "anydsl_random_seed"     random_seed(u32) -> ();
    fn "anydsl_random_val_f32"  random_val_f32() -> f32;
    fn "anydsl_random_val_u64"  random_val_u64() -> u64;

    fn "anydsl_get_micro_time"  get_micro_time() -> i64;
    fn "anydsl_get_kernel_time" get_kernel_time() -> i64;

    fn "anydsl_print_i16"    print_i16(i16) -> ();
    fn "anydsl_print_i32"    print_i32(i32) -> ();
    fn "anydsl_print_i64"    print_i64(i64) -> ();
    fn "anydsl_print_f32"    print_f32(f32) -> ();
    fn "anydsl_print_f64"    print_f64(f64) -> ();
    fn "anydsl_print_char"   print_char(u8) -> ();
    fn "anydsl_print_string" print_string(&[u8]) -> ();
}

fn runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }

struct Buffer {
    device: i32,
    data: &[i8]
}

fn alloc(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc(dev, size as i64)
    }
}
fn alloc_host(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc_host(dev, size as i64)
    }
}
fn alloc_unified(dev: i32, size: i32) -> Buffer {
    Buffer {
        device: dev,
        data: runtime_alloc_unified(dev, size as i64)
    }
}
fn release(buf: Buffer) -> () { runtime_release(buf.device, buf.data) }

fn alloc_cpu(size: i32) -> Buffer { alloc(0, size) }
fn alloc_cuda(dev: i32, size: i32) -> Buffer { alloc(runtime_device(1, dev), size) }
fn alloc_cuda_host(dev: i32, size: i32) -> Buffer { alloc_host(runtime_device(1, dev), size) }
fn alloc_cuda_unified(dev: i32, size: i32) -> Buffer { alloc_unified(runtime_device(1, dev), size) }
fn synchronize_cuda(dev: i32) -> () { runtime_synchronize(runtime_device(1, dev)) }
fn alloc_opencl(dev: i32, size: i32) -> Buffer { alloc(runtime_device(2, dev), size) }
fn alloc_opencl_unified(dev: i32, size: i32) -> Buffer { alloc_unified(runtime_device(2, dev), size) }
fn synchronize_opencl(dev: i32) -> () { runtime_synchronize(runtime_device(2, dev)) }
fn alloc_hsa(dev: i32, size: i32) -> Buffer { alloc(runtime_device(3, dev), size) }
fn alloc_hsa_host(dev: i32, size: i32) -> Buffer { alloc_host(runtime_device(3, dev), size) }
fn alloc_hsa_unified(dev: i32, size: i32) -> Buffer { alloc_unified(runtime_device(3, dev), size) }
fn synchronize_hsa(dev: i32) -> () { runtime_synchronize(runtime_device(3, dev)) }

fn copy(src: Buffer, dst: Buffer, size: i32) -> () {
    runtime_copy(src.device, src.data, 0i64, dst.device, dst.data, 0i64, size as i64)
}

fn copy_offset(src: Buffer, off_src: i32, dst: Buffer, off_dst: i32, size: i32) -> () {
    runtime_copy(src.device, src.data, off_src as i64, dst.device, dst.data, off_dst as i64, size as i64)
}

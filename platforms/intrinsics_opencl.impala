extern "device" {
    // no declarations are emitted for "device" functions
    fn "barrier"    opencl_barrier(u32) -> ();
    fn "exp"        opencl_expf(f32) -> f32;
    fn "exp2"       opencl_exp2f(f32) -> f32;
    fn "log"        opencl_logf(f32) -> f32;
    fn "log2"       opencl_log2f(f32) -> f32;
    fn "pow"        opencl_powf(f32, f32) -> f32;
    fn "rsqrt"      opencl_rsqrtf(f32) -> f32;
    fn "sqrt"       opencl_sqrtf(f32) -> f32;
    fn "fabs"       opencl_fabsf(f32) -> f32;
    fn "sin"        opencl_sinf(f32) -> f32;
    fn "cos"        opencl_cosf(f32) -> f32;
    fn "tan"        opencl_tanf(f32) -> f32;
    fn "asin"       opencl_asinf(f32) -> f32;
    fn "acos"       opencl_acosf(f32) -> f32;
    fn "atan"       opencl_atanf(f32) -> f32;
    fn "erf"        opencl_erff(f32) -> f32;
    fn "atan2"      opencl_atan2f(f32, f32) -> f32;
    fn "fmod"       opencl_fmodf(f32, f32) -> f32;
    fn "floor"      opencl_floorf(f32) -> f32;
    fn "isinf"      opencl_isinff(f32) -> i32;
    fn "isnan"      opencl_isnanf(f32) -> i32;
    fn "isfinite"   opencl_isfinitef(f32) -> i32;
    fn "fma"        opencl_fmaf(f32, f32, f32) -> f32;
    fn "mad"        opencl_madf(f32, f32, f32) -> f32;
    fn "copysign"   opencl_copysignf(f32, f32) -> f32;
    fn "exp"        opencl_exp(f64) -> f64;
    fn "exp2"       opencl_exp2(f64) -> f64;
    fn "log"        opencl_log(f64) -> f64;
    fn "log2"       opencl_log2(f64) -> f64;
    fn "pow"        opencl_pow(f64, f64) -> f64;
    fn "rsqrt"      opencl_rsqrt(f64) -> f64;
    fn "sqrt"       opencl_sqrt(f64) -> f64;
    fn "fabs"       opencl_fabs(f64) -> f64;
    fn "sin"        opencl_sin(f64) -> f64;
    fn "cos"        opencl_cos(f64) -> f64;
    fn "tan"        opencl_tan(f64) -> f64;
    fn "asin"       opencl_asin(f64) -> f64;
    fn "acos"       opencl_acos(f64) -> f64;
    fn "atan"       opencl_atan(f64) -> f64;
    fn "erf"        opencl_erf(f64) -> f64;
    fn "atan2"      opencl_atan2(f64, f64) -> f64;
    fn "fmod"       opencl_fmod(f64, f64) -> f64;
    fn "floor"      opencl_floor(f64) -> f64;
    fn "isinf"      opencl_isinf(f64) -> i32;
    fn "isnan"      opencl_isnan(f64) -> i32;
    fn "isfinite"   opencl_isfinite(f64) -> i32;
    fn "fma"        opencl_fma(f64, f64, f64) -> f64;
    fn "mad"        opencl_mad(f64, f64, f64) -> f64;
    fn "copysign"   opencl_copysign(f64, f64) -> f64;
    fn "fmin"       opencl_fminf(f32, f32) -> f32;
    fn "fmax"       opencl_fmaxf(f32, f32) -> f32;
    fn "fmin"       opencl_fmin(f64, f64) -> f64;
    fn "fmax"       opencl_fmax(f64, f64) -> f64;
    fn "min"        opencl_min(i32, i32) -> i32;
    fn "max"        opencl_max(i32, i32) -> i32;
    fn "atomic_add" opencl_atomic_add_global(&mut[1]i32, i32) -> i32;
    fn "atomic_add" opencl_atomic_add_shared(&mut[3]i32, i32) -> i32;
    fn "atomic_min" opencl_atomic_min_global(&mut[1]i32, i32) -> i32;
    fn "atomic_min" opencl_atomic_min_shared(&mut[3]i32, i32) -> i32;
    fn "get_work_dim"      opencl_get_work_dim() -> u32;
    fn "get_global_size"   opencl_get_global_size(u32) -> u64;
    fn "get_global_id"     opencl_get_global_id(u32) -> u64;
    fn "get_local_size"    opencl_get_local_size(u32) -> u64;
    fn "get_local_id"      opencl_get_local_id(u32) -> u64;
    fn "get_num_groups"    opencl_get_num_groups(u32) -> u64;
    fn "get_group_id"      opencl_get_group_id(u32) -> u64;
    fn "get_global_offset" opencl_get_global_offset(u32) -> u64;
}

fn @opencl_accelerator(dev: i32) -> Accelerator {
    Accelerator {
        exec          : @|grid, block, body| {
            let work_item = WorkItem {
                tidx  : @|| opencl_get_local_id(0u32) as i32,
                tidy  : @|| opencl_get_local_id(1u32) as i32,
                tidz  : @|| opencl_get_local_id(2u32) as i32,
                bidx  : @|| opencl_get_group_id(0u32) as i32,
                bidy  : @|| opencl_get_group_id(1u32) as i32,
                bidz  : @|| opencl_get_group_id(2u32) as i32,
                gidx  : @|| opencl_get_global_id(0u32) as i32,
                gidy  : @|| opencl_get_global_id(1u32) as i32,
                gidz  : @|| opencl_get_global_id(2u32) as i32,
                bdimx : @|| opencl_get_local_size(0u32) as i32,
                bdimy : @|| opencl_get_local_size(1u32) as i32,
                bdimz : @|| opencl_get_local_size(2u32) as i32,
                gdimx : @|| opencl_get_global_size(0u32) as i32,
                gdimy : @|| opencl_get_global_size(1u32) as i32,
                gdimz : @|| opencl_get_global_size(2u32) as i32,
                nblkx : @|| opencl_get_num_groups(0u32) as i32,
                nblky : @|| opencl_get_num_groups(1u32) as i32,
                nblkz : @|| opencl_get_num_groups(2u32) as i32
            };
            opencl(dev, grid, block, || @@body(work_item))
        },
        sync          : @|| synchronize_opencl(dev),
        alloc         : @|size| alloc_opencl(dev, size),
        alloc_unified : @|size| alloc_opencl_unified(dev, size),
        barrier       : @|| opencl_barrier(1u32), // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
    }
}

static opencl_intrinsics = Intrinsics {
    expf        : opencl_expf,
    exp2f       : opencl_exp2f,
    logf        : opencl_logf,
    log2f       : opencl_log2f,
    powf        : opencl_powf,
    rsqrtf      : opencl_rsqrtf,
    sqrtf       : opencl_sqrtf,
    fabsf       : opencl_fabsf,
    sinf        : opencl_sinf,
    cosf        : opencl_cosf,
    tanf        : opencl_tanf,
    asinf       : opencl_asinf,
    acosf       : opencl_acosf,
    atanf       : opencl_atanf,
    erff        : opencl_erff,
    atan2f      : opencl_atan2f,
    copysignf   : opencl_copysignf,
    fmaf        : opencl_fmaf,
    fmaxf       : opencl_fmaxf,
    fminf       : opencl_fminf,
    fmodf       : opencl_fmodf,
    floorf      : opencl_floorf,
    isinff      : opencl_isinff,
    isnanf      : opencl_isnanf,
    isfinitef   : opencl_isfinitef,
    exp         : opencl_exp,
    exp2        : opencl_exp2,
    log         : opencl_log,
    log2        : opencl_log2,
    pow         : opencl_pow,
    rsqrt       : opencl_rsqrt,
    sqrt        : opencl_sqrt,
    fabs        : opencl_fabs,
    sin         : opencl_sin,
    cos         : opencl_cos,
    tan         : opencl_tan,
    asin        : opencl_asin,
    acos        : opencl_acos,
    atan        : opencl_atan,
    erf         : opencl_erf,
    atan2       : opencl_atan2,
    copysign    : opencl_copysign,
    fma         : opencl_fma,
    fmax        : opencl_fmax,
    fmin        : opencl_fmin,
    fmod        : opencl_fmod,
    floor       : opencl_floor,
    isinf       : opencl_isinf,
    isnan       : opencl_isnan,
    isfinite    : opencl_isfinite,
    min         : opencl_min,
    max         : opencl_max,
};

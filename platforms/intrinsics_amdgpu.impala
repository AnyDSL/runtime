extern "device" {
    fn "llvm.amdgcn.dispatch.id"    amdgcn_dispatch_id() -> i64;
    fn "llvm.amdgcn.dispatch.ptr"   amdgcn_dispatch_ptr() -> &[2]i8;
    fn "llvm.amdgcn.s.barrier"      amdgcn_s_barrier() -> ();
    fn "llvm.amdgcn.wave.barrier"   amdgcn_wave_barrier() -> ();
    fn "llvm.amdgcn.workgroup.id.x" amdgcn_workgroup_id_x() -> i32;
    fn "llvm.amdgcn.workgroup.id.y" amdgcn_workgroup_id_y() -> i32;
    fn "llvm.amdgcn.workgroup.id.z" amdgcn_workgroup_id_z() -> i32;
    fn "llvm.amdgcn.workitem.id.x"  amdgcn_workitem_id_x() -> i32;
    fn "llvm.amdgcn.workitem.id.y"  amdgcn_workitem_id_y() -> i32;
    fn "llvm.amdgcn.workitem.id.z"  amdgcn_workitem_id_z() -> i32;
    fn "llvm.amdgcn.sin.f32"        amdgcn_sinf(f32) -> f32;
    fn "llvm.amdgcn.cos.f32"        amdgcn_cosf(f32) -> f32;
    fn "llvm.amdgcn.sin.f64"        amdgcn_sin(f64) -> f64;
    fn "llvm.amdgcn.cos.f64"        amdgcn_cos(f64) -> f64;
    fn __llvm_fence_rel_wg() -> ();
    fn __llvm_fence_acq_wg() -> ();
}

extern "C" {
    // https://github.com/RadeonOpenCompute/ROCm-Device-Libs/blob/master/doc/OCML.md
    fn "__ocml_exp_f32"         ocml_expf(f32) -> f32;
    fn "__ocml_exp2_f32"        ocml_exp2f(f32) -> f32;
    fn "__ocml_log_f32"         ocml_logf(f32) -> f32;
    fn "__ocml_log2_f32"        ocml_log2f(f32) -> f32;
    fn "__ocml_pow_f32"         ocml_powf(f32, f32) -> f32;
    fn "__ocml_rsqrt_f32"       ocml_rsqrtf(f32) -> f32;
    fn "__ocml_sqrt_f32"        ocml_sqrtf(f32) -> f32;
    fn "__ocml_fabs_f32"        ocml_fabsf(f32) -> f32;
    fn "__ocml_sin_f32"         ocml_sinf(f32) -> f32;
    fn "__ocml_cos_f32"         ocml_cosf(f32) -> f32;
    fn "__ocml_tan_f32"         ocml_tanf(f32) -> f32;
    fn "__ocml_asin_f32"        ocml_asinf(f32) -> f32;
    fn "__ocml_acos_f32"        ocml_acosf(f32) -> f32;
    fn "__ocml_atan_f32"        ocml_atanf(f32) -> f32;
    fn "__ocml_erf_f32"         ocml_erff(f32) -> f32;
    fn "__ocml_atan2_f32"       ocml_atan2f(f32, f32) -> f32;
    fn "__ocml_copysign_f32"    ocml_copysignf(f32, f32) -> f32;
    fn "__ocml_fma_f32"         ocml_fmaf(f32, f32, f32) -> f32;
    fn "__ocml_fmax_f32"        ocml_fmaxf(f32, f32) -> f32;
    fn "__ocml_fmin_f32"        ocml_fminf(f32, f32) -> f32;
    fn "__ocml_fmod_f32"        ocml_fmodf(f32, f32) -> f32;
    fn "__ocml_floor_f32"       ocml_floorf(f32) -> f32;
    fn "__ocml_isinf_f32"       ocml_isinff(f32) -> i32;
    fn "__ocml_isnan_f32"       ocml_isnanf(f32) -> i32;
    fn "__ocml_finite_f32"      ocml_isfinitef(f32) -> i32;
    fn "__ocml_mad_f32"         ocml_madf(f32, f32, f32) -> f32;
    fn "__ocml_exp_f64"         ocml_exp(f64) -> f64;
    fn "__ocml_exp2_f64"        ocml_exp2(f64) -> f64;
    fn "__ocml_log_f64"         ocml_log(f64) -> f64;
    fn "__ocml_log2_f64"        ocml_log2(f64) -> f64;
    fn "__ocml_pow_f64"         ocml_pow(f64, f64) -> f64;
    fn "__ocml_rsqrt_f64"       ocml_rsqrt(f64) -> f64;
    fn "__ocml_sqrt_f64"        ocml_sqrt(f64) -> f64;
    fn "__ocml_fabs_f64"        ocml_fabs(f64) -> f64;
    fn "__ocml_sin_f64"         ocml_sin(f64) -> f64;
    fn "__ocml_cos_f64"         ocml_cos(f64) -> f64;
    fn "__ocml_tan_f64"         ocml_tan(f64) -> f64;
    fn "__ocml_asin_f64"        ocml_asin(f64) -> f64;
    fn "__ocml_acos_f64"        ocml_acos(f64) -> f64;
    fn "__ocml_atan_f64"        ocml_atan(f64) -> f64;
    fn "__ocml_erf_f64"         ocml_erf(f64) -> f64;
    fn "__ocml_atan2_f64"       ocml_atan2(f64, f64) -> f64;
    fn "__ocml_copysign_f64"    ocml_copysign(f64, f64) -> f64;
    fn "__ocml_fma_f64"         ocml_fma(f64, f64, f64) -> f64;
    fn "__ocml_fmax_f64"        ocml_fmax(f64, f64) -> f64;
    fn "__ocml_fmin_f64"        ocml_fmin(f64, f64) -> f64;
    fn "__ocml_fmod_f64"        ocml_fmod(f64, f64) -> f64;
    fn "__ocml_floor_f64"       ocml_floor(f64) -> f64;
    fn "__ocml_isinf_f64"       ocml_isinf(f64) -> i32;
    fn "__ocml_isnan_f64"       ocml_isnan(f64) -> i32;
    fn "__ocml_finite_f64"      ocml_isfinite(f64) -> i32;
    fn "__ocml_mad_f64"         ocml_mad(f64, f64, f64) -> f64;
}

struct hsa_signal_t {
    handle : u64
}

struct hsa_dispatch_packet_t {
    header : u16,
    setup  : u16,
    workgroup_size_x : u16,
    workgroup_size_y : u16,
    workgroup_size_z : u16,
    reserved0   : u16,
    grid_size_x : u32,
    grid_size_y : u32,
    grid_size_z : u32,
    private_segment_size : u32,
    group_segment_size   : u32,
    kernel_object : u64,
    kernarg_address : &[i8], // HSA_LARGE_MODEL
    reserved2 : u64,
    completion_signal : hsa_signal_t
}

fn amdgpu_accelerator(dev: i32) -> Accelerator {
    Accelerator {
        exec          : |grid, block, body| amdgpu(dev, grid, block, body),
        alloc         : |size| alloc_hsa(dev, size),
        alloc_unified : |size| alloc_hsa_unified(dev, size),
        tidx          : amdgcn_workitem_id_x,
        tidy          : amdgcn_workitem_id_y,
        tidz          : amdgcn_workitem_id_z,
        bidx          : amdgcn_workgroup_id_x,
        bidy          : amdgcn_workgroup_id_y,
        bidz          : amdgcn_workgroup_id_z,
        bdimx         : || bitcast[&[2][u16]](amdgcn_dispatch_ptr())(2) as i32,
        bdimy         : || bitcast[&[2][u16]](amdgcn_dispatch_ptr())(3) as i32,
        bdimz         : || bitcast[&[2][u16]](amdgcn_dispatch_ptr())(4) as i32,
        gdimx         : || bitcast[&[2][u32]](amdgcn_dispatch_ptr())(3) as i32,
        gdimy         : || bitcast[&[2][u32]](amdgcn_dispatch_ptr())(4) as i32,
        gdimz         : || bitcast[&[2][u32]](amdgcn_dispatch_ptr())(5) as i32,
        gidx          : || amdgcn_workitem_id_x() + bitcast[&[2][u16]](amdgcn_dispatch_ptr())(2) as i32 * amdgcn_workgroup_id_x(),
        gidy          : || amdgcn_workitem_id_y() + bitcast[&[2][u16]](amdgcn_dispatch_ptr())(3) as i32 * amdgcn_workgroup_id_y(),
        gidz          : || amdgcn_workitem_id_z() + bitcast[&[2][u16]](amdgcn_dispatch_ptr())(4) as i32 * amdgcn_workgroup_id_z(),
        barrier       : || { __llvm_fence_rel_wg(); amdgcn_s_barrier(); __llvm_fence_acq_wg() },
    }
}

static amdgpu_intrinsics = Intrinsics {
    expf        : ocml_sinf,
    exp2f       : ocml_exp2f,
    logf        : ocml_logf,
    log2f       : ocml_log2f,
    powf        : ocml_powf,
    rsqrtf      : ocml_rsqrtf,
    sqrtf       : ocml_sqrtf,
    fabsf       : ocml_fabsf,
    sinf        : amdgcn_sinf,
    cosf        : amdgcn_cosf,
    tanf        : ocml_tanf,
    asinf       : ocml_asinf,
    acosf       : ocml_acosf,
    atanf       : ocml_atanf,
    erff        : ocml_erff,
    atan2f      : ocml_atan2f,
    copysignf   : ocml_copysignf,
    fmaf        : ocml_fmaf,
    fmaxf       : ocml_fmaxf,
    fminf       : ocml_fminf,
    fmodf       : ocml_fmodf,
    floorf      : ocml_floorf,
    isinff      : ocml_isinff,
    isnanf      : ocml_isnanf,
    isfinitef   : ocml_isfinitef,
    exp         : ocml_exp,
    exp2        : ocml_exp2,
    log         : ocml_log,
    log2        : ocml_log2,
    pow         : ocml_pow,
    rsqrt       : ocml_rsqrt,
    sqrt        : ocml_sqrt,
    fabs        : ocml_fabs,
    sin         : amdgcn_sin,
    cos         : amdgcn_cos,
    tan         : ocml_tan,
    asin        : ocml_asin,
    acos        : ocml_acos,
    atan        : ocml_atan,
    erf         : ocml_erf,
    atan2       : ocml_atan2,
    copysign    : ocml_copysign,
    fma         : ocml_fma,
    fmax        : ocml_fmax,
    fmin        : ocml_fmin,
    fmod        : ocml_fmod,
    floor       : ocml_floor,
    isinf       : ocml_isinf,
    isnan       : ocml_isnan,
    isfinite    : ocml_isfinite,
    min         : |a: i32, b: i32| -> i32 { if a < b { a } else { b } },
    max         : |a: i32, b: i32| -> i32 { if a > b { a } else { b } },
};

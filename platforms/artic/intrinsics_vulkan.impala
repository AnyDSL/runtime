// no declarations are emitted for "device" functions
#[import(cc = "device", name = "barrier")]           fn vulkan_barrier(u32) -> ();
#[import(cc = "device", name = "exp")]               fn vulkan_expf(f32) -> f32;
#[import(cc = "device", name = "exp2")]              fn vulkan_exp2f(f32) -> f32;
#[import(cc = "device", name = "log")]               fn vulkan_logf(f32) -> f32;
#[import(cc = "device", name = "log2")]              fn vulkan_log2f(f32) -> f32;
#[import(cc = "device", name = "pow")]               fn vulkan_powf(f32, f32) -> f32;
#[import(cc = "device", name = "rsqrt")]             fn vulkan_rsqrtf(f32) -> f32;
#[import(cc = "device", name = "sqrt")]              fn vulkan_sqrtf(f32) -> f32;
#[import(cc = "device", name = "fabs")]              fn vulkan_fabsf(f32) -> f32;
#[import(cc = "device", name = "sin")]               fn vulkan_sinf(f32) -> f32;
#[import(cc = "device", name = "cos")]               fn vulkan_cosf(f32) -> f32;
#[import(cc = "device", name = "tan")]               fn vulkan_tanf(f32) -> f32;
#[import(cc = "device", name = "asin")]              fn vulkan_asinf(f32) -> f32;
#[import(cc = "device", name = "acos")]              fn vulkan_acosf(f32) -> f32;
#[import(cc = "device", name = "atan")]              fn vulkan_atanf(f32) -> f32;
#[import(cc = "device", name = "erf")]               fn vulkan_erff(f32) -> f32;
#[import(cc = "device", name = "atan2")]             fn vulkan_atan2f(f32, f32) -> f32;
#[import(cc = "device", name = "fmod")]              fn vulkan_fmodf(f32, f32) -> f32;
#[import(cc = "device", name = "floor")]             fn vulkan_floorf(f32) -> f32;
#[import(cc = "device", name = "isinf")]             fn vulkan_isinff(f32) -> i32;
#[import(cc = "device", name = "isnan")]             fn vulkan_isnanf(f32) -> i32;
#[import(cc = "device", name = "isfinite")]          fn vulkan_isfinitef(f32) -> i32;
#[import(cc = "device", name = "fma")]               fn vulkan_fmaf(f32, f32, f32) -> f32;
#[import(cc = "device", name = "mad")]               fn vulkan_madf(f32, f32, f32) -> f32;
#[import(cc = "device", name = "copysign")]          fn vulkan_copysignf(f32, f32) -> f32;
#[import(cc = "device", name = "exp")]               fn vulkan_exp(f64) -> f64;
#[import(cc = "device", name = "exp2")]              fn vulkan_exp2(f64) -> f64;
#[import(cc = "device", name = "log")]               fn vulkan_log(f64) -> f64;
#[import(cc = "device", name = "log2")]              fn vulkan_log2(f64) -> f64;
#[import(cc = "device", name = "pow")]               fn vulkan_pow(f64, f64) -> f64;
#[import(cc = "device", name = "rsqrt")]             fn vulkan_rsqrt(f64) -> f64;
#[import(cc = "device", name = "sqrt")]              fn vulkan_sqrt(f64) -> f64;
#[import(cc = "device", name = "fabs")]              fn vulkan_fabs(f64) -> f64;
#[import(cc = "device", name = "sin")]               fn vulkan_sin(f64) -> f64;
#[import(cc = "device", name = "cos")]               fn vulkan_cos(f64) -> f64;
#[import(cc = "device", name = "tan")]               fn vulkan_tan(f64) -> f64;
#[import(cc = "device", name = "asin")]              fn vulkan_asin(f64) -> f64;
#[import(cc = "device", name = "acos")]              fn vulkan_acos(f64) -> f64;
#[import(cc = "device", name = "atan")]              fn vulkan_atan(f64) -> f64;
#[import(cc = "device", name = "erf")]               fn vulkan_erf(f64) -> f64;
#[import(cc = "device", name = "atan2")]             fn vulkan_atan2(f64, f64) -> f64;
#[import(cc = "device", name = "fmod")]              fn vulkan_fmod(f64, f64) -> f64;
#[import(cc = "device", name = "floor")]             fn vulkan_floor(f64) -> f64;
#[import(cc = "device", name = "isinf")]             fn vulkan_isinf(f64) -> i32;
#[import(cc = "device", name = "isnan")]             fn vulkan_isnan(f64) -> i32;
#[import(cc = "device", name = "isfinite")]          fn vulkan_isfinite(f64) -> i32;
#[import(cc = "device", name = "fma")]               fn vulkan_fma(f64, f64, f64) -> f64;
#[import(cc = "device", name = "mad")]               fn vulkan_mad(f64, f64, f64) -> f64;
#[import(cc = "device", name = "copysign")]          fn vulkan_copysign(f64, f64) -> f64;
#[import(cc = "device", name = "fmin")]              fn vulkan_fminf(f32, f32) -> f32;
#[import(cc = "device", name = "fmax")]              fn vulkan_fmaxf(f32, f32) -> f32;
#[import(cc = "device", name = "fmin")]              fn vulkan_fmin(f64, f64) -> f64;
#[import(cc = "device", name = "fmax")]              fn vulkan_fmax(f64, f64) -> f64;
#[import(cc = "device", name = "min")]               fn vulkan_min(i32, i32) -> i32;
#[import(cc = "device", name = "max")]               fn vulkan_max(i32, i32) -> i32;
#[import(cc = "device", name = "atomic_add")]        fn vulkan_atomic_add_global(&mut addrspace(1)i32, i32) -> i32;
#[import(cc = "device", name = "atomic_add")]        fn vulkan_atomic_add_shared(&mut addrspace(3)i32, i32) -> i32;
#[import(cc = "device", name = "atomic_min")]        fn vulkan_atomic_min_global(&mut addrspace(1)i32, i32) -> i32;
#[import(cc = "device", name = "atomic_min")]        fn vulkan_atomic_min_shared(&mut addrspace(3)i32, i32) -> i32;
#[import(cc = "device", name = "get_work_dim")]      fn vulkan_get_work_dim() -> u32;
#[import(cc = "device", name = "get_global_size")]   fn vulkan_get_global_size(u32) -> i32;
#[import(cc = "device", name = "get_global_id")]     fn vulkan_get_global_id(u32) -> i32;
#[import(cc = "device", name = "get_local_size")]    fn vulkan_get_local_size(u32) -> i32;
#[import(cc = "device", name = "get_local_id")]      fn vulkan_get_local_id(u32) -> i32;
#[import(cc = "device", name = "get_num_groups")]    fn vulkan_get_num_groups(u32) -> i32;
#[import(cc = "device", name = "get_group_id")]      fn vulkan_get_group_id(u32) -> i32;
#[import(cc = "device", name = "get_global_offset")] fn vulkan_get_global_offset(u32) -> i32;

#[import(cc = "device", name = "spirv.nonsemantic.printf")] fn shader_printf[T](T) -> ();

fn @vulkan_accelerator(dev: i32) = Accelerator {
    exec          = @|body| |grid, block| {
        let work_item = WorkItem {
            tidx  = @|| vulkan_get_local_id(0),
            tidy  = @|| vulkan_get_local_id(1),
            tidz  = @|| vulkan_get_local_id(2),
            bidx  = @|| vulkan_get_group_id(0),
            bidy  = @|| vulkan_get_group_id(1),
            bidz  = @|| vulkan_get_group_id(2),
            gidx  = @|| vulkan_get_global_id(0),
            gidy  = @|| vulkan_get_global_id(1),
            gidz  = @|| vulkan_get_global_id(2),
            bdimx = @|| vulkan_get_local_size(0),
            bdimy = @|| vulkan_get_local_size(1),
            bdimz = @|| vulkan_get_local_size(2),
            gdimx = @|| vulkan_get_global_size(0),
            gdimy = @|| vulkan_get_global_size(1),
            gdimz = @|| vulkan_get_global_size(2),
            nblkx = @|| vulkan_get_num_groups(0),
            nblky = @|| vulkan_get_num_groups(1),
            nblkz = @|| vulkan_get_num_groups(2)
        };
        spirv(dev, grid, block, || @body(work_item))
    },
    sync          = @|| synchronize_vulkan(dev),
    alloc         = @|size| alloc_vulkan(dev, size),
    alloc_unified = @|size| alloc_opencl_unified(dev, size),
    barrier       = @|| opencl_barrier(CLK_LOCAL_MEM_FENCE),
};

static vk_intrinsics = Intrinsics {
    expf        = vulkan_expf,
    exp2f       = vulkan_exp2f,
    logf        = vulkan_logf,
    log2f       = vulkan_log2f,
    powf        = vulkan_powf,
    rsqrtf      = vulkan_rsqrtf,
    sqrtf       = vulkan_sqrtf,
    fabsf       = vulkan_fabsf,
    sinf        = vulkan_sinf,
    cosf        = vulkan_cosf,
    tanf        = vulkan_tanf,
    asinf       = vulkan_asinf,
    acosf       = vulkan_acosf,
    atanf       = vulkan_atanf,
    erff        = vulkan_erff,
    atan2f      = vulkan_atan2f,
    copysignf   = vulkan_copysignf,
    fmaf        = vulkan_fmaf,
    fmaxf       = vulkan_fmaxf,
    fminf       = vulkan_fminf,
    fmodf       = vulkan_fmodf,
    floorf      = vulkan_floorf,
    isinff      = vulkan_isinff,
    isnanf      = vulkan_isnanf,
    isfinitef   = vulkan_isfinitef,
    exp         = vulkan_exp,
    exp2        = vulkan_exp2,
    log         = vulkan_log,
    log2        = vulkan_log2,
    pow         = vulkan_pow,
    rsqrt       = vulkan_rsqrt,
    sqrt        = vulkan_sqrt,
    fabs        = vulkan_fabs,
    sin         = vulkan_sin,
    cos         = vulkan_cos,
    tan         = vulkan_tan,
    asin        = vulkan_asin,
    acos        = vulkan_acos,
    atan        = vulkan_atan,
    erf         = vulkan_erf,
    atan2       = vulkan_atan2,
    copysign    = vulkan_copysign,
    fma         = vulkan_fma,
    fmax        = vulkan_fmax,
    fmin        = vulkan_fmin,
    fmod        = vulkan_fmod,
    floor       = vulkan_floor,
    isinf       = vulkan_isinf,
    isnan       = vulkan_isnan,
    isfinite    = vulkan_isfinite,
    min         = vulkan_min,
    max         = vulkan_max,
};

// no declarations are emitted for "device" functions
#[import(cc = "C", name = "exp")]      fn hls_expf(f32) -> f32;
#[import(cc = "C", name = "exp2")]     fn hls_exp2f(f32) -> f32;
#[import(cc = "C", name = "log")]      fn hls_logf(f32) -> f32;
#[import(cc = "C", name = "log2")]     fn hls_log2f(f32) -> f32;
#[import(cc = "C", name = "pow")]      fn hls_powf(f32, f32) -> f32;
#[import(cc = "C", name = "rsqrt")]    fn hls_rsqrtf(f32) -> f32;
#[import(cc = "C", name = "sqrt")]     fn hls_sqrtf(f32) -> f32;
#[import(cc = "C", name = "fabs")]     fn hls_fabsf(f32) -> f32;
#[import(cc = "C", name = "sin")]      fn hls_sinf(f32) -> f32;
#[import(cc = "C", name = "cos")]      fn hls_cosf(f32) -> f32;
#[import(cc = "C", name = "tan")]      fn hls_tanf(f32) -> f32;
#[import(cc = "C", name = "asin")]     fn hls_asinf(f32) -> f32;
#[import(cc = "C", name = "acos")]     fn hls_acosf(f32) -> f32;
#[import(cc = "C", name = "atan")]     fn hls_atanf(f32) -> f32;
#[import(cc = "C", name = "erf")]      fn hls_erff(f32) -> f32;
#[import(cc = "C", name = "atan2")]    fn hls_atan2f(f32, f32) -> f32;
#[import(cc = "C", name = "fmod")]     fn hls_fmodf(f32, f32) -> f32;
#[import(cc = "C", name = "floor")]    fn hls_floorf(f32) -> f32;
#[import(cc = "C", name = "isinf")]    fn hls_isinff(f32) -> i32;
#[import(cc = "C", name = "isnan")]    fn hls_isnanf(f32) -> i32;
#[import(cc = "C", name = "isfinite")] fn hls_isfinitef(f32) -> i32;
#[import(cc = "C", name = "fma")]      fn hls_fmaf(f32, f32, f32) -> f32;
#[import(cc = "C", name = "mad")]      fn hls_madf(f32, f32, f32) -> f32;
#[import(cc = "C", name = "copysign")] fn hls_copysignf(f32, f32) -> f32;
#[import(cc = "C", name = "exp")]      fn hls_exp(f64) -> f64;
#[import(cc = "C", name = "exp2")]     fn hls_exp2(f64) -> f64;
#[import(cc = "C", name = "log")]      fn hls_log(f64) -> f64;
#[import(cc = "C", name = "log2")]     fn hls_log2(f64) -> f64;
#[import(cc = "C", name = "pow")]      fn hls_pow(f64, f64) -> f64;
#[import(cc = "C", name = "rsqrt")]    fn hls_rsqrt(f64) -> f64;
#[import(cc = "C", name = "sqrt")]     fn hls_sqrt(f64) -> f64;
#[import(cc = "C", name = "fabs")]     fn hls_fabs(f64) -> f64;
#[import(cc = "C", name = "sin")]      fn hls_sin(f64) -> f64;
#[import(cc = "C", name = "cos")]      fn hls_cos(f64) -> f64;
#[import(cc = "C", name = "tan")]      fn hls_tan(f64) -> f64;
#[import(cc = "C", name = "asin")]     fn hls_asin(f64) -> f64;
#[import(cc = "C", name = "acos")]     fn hls_acos(f64) -> f64;
#[import(cc = "C", name = "atan")]     fn hls_atan(f64) -> f64;
#[import(cc = "C", name = "erf")]      fn hls_erf(f64) -> f64;
#[import(cc = "C", name = "atan2")]    fn hls_atan2(f64, f64) -> f64;
#[import(cc = "C", name = "fmod")]     fn hls_fmod(f64, f64) -> f64;
#[import(cc = "C", name = "floor")]    fn hls_floor(f64) -> f64;
#[import(cc = "C", name = "isinf")]    fn hls_isinf(f64) -> i32;
#[import(cc = "C", name = "isnan")]    fn hls_isnan(f64) -> i32;
#[import(cc = "C", name = "isfinite")] fn hls_isfinite(f64) -> i32;
#[import(cc = "C", name = "fma")]      fn hls_fma(f64, f64, f64) -> f64;
#[import(cc = "C", name = "mad")]      fn hls_mad(f64, f64, f64) -> f64;
#[import(cc = "C", name = "copysign")] fn hls_copysign(f64, f64) -> f64;
#[import(cc = "C", name = "fmin")]     fn hls_fminf(f32, f32) -> f32;
#[import(cc = "C", name = "fmax")]     fn hls_fmaxf(f32, f32) -> f32;
#[import(cc = "C", name = "fmin")]     fn hls_fmin(f64, f64) -> f64;
#[import(cc = "C", name = "fmax")]     fn hls_fmax(f64, f64) -> f64;
#[import(cc = "C", name = "min")]      fn hls_min(i32, i32) -> i32;
#[import(cc = "C", name = "max")]      fn hls_max(i32, i32) -> i32;

#[import(cc = "device")] fn print_pragma(&[u8]) -> ();

// channel scalar types
struct channel[T] { data : T }
// channel array types
struct channel1[T]   { data : [T * 1  ] }
struct channel2[T]   { data : [T * 2  ] }
struct channel4[T]   { data : [T * 4  ] }
struct channel8[T]   { data : [T * 8  ] }
struct channel16[T]  { data : [T * 16 ] }
struct channel32[T]  { data : [T * 32 ] }
struct channel64[T]  { data : [T * 64 ] }
struct channel128[T] { data : [T * 128] }

// read and write on scalar channels
#[import(cc = "device", name = "read_channel")] fn read_channel[T]  (&mut channel[T]) ->  T;
#[import(cc = "device", name = "write_channel")] fn write_channel[T] (&mut channel[T],  T ) -> ();

// read and write on array channels
#[import(cc = "device", name = "read_channel")] fn read_channel1[T] ( &mut channel1[T] ) -> [T * 1 ];
#[import(cc = "device", name = "read_channel")] fn read_channel2[T] ( &mut channel2[T] ) -> [T * 2 ];
#[import(cc = "device", name = "read_channel")] fn read_channel4[T] ( &mut channel4[T] ) -> [T * 4 ];
#[import(cc = "device", name = "read_channel")] fn read_channel8[T] ( &mut channel8[T] ) -> [T * 8 ];
#[import(cc = "device", name = "read_channel")] fn read_channel16[T]( &mut channel16[T]) -> [T * 16];
#[import(cc = "device", name = "read_channel")] fn read_channel32[T]( &mut channel32[T]) -> [T * 32];

#[import(cc = "device", name = "write_channel")] fn write_channel1[T] ( &mut channel1[T],  [T * 1 ]) -> ();
#[import(cc = "device", name = "write_channel")] fn write_channel2[T] ( &mut channel2[T],  [T * 2 ]) -> ();
#[import(cc = "device", name = "write_channel")] fn write_channel4[T] ( &mut channel4[T],  [T * 4 ]) -> ();
#[import(cc = "device", name = "write_channel")] fn write_channel8[T] ( &mut channel8[T],  [T * 8 ]) -> ();
#[import(cc = "device", name = "write_channel")] fn write_channel16[T]( &mut channel16[T], [T * 16]) -> ();
#[import(cc = "device", name = "write_channel")] fn write_channel32[T]( &mut channel32[T], [T * 32]) -> ();
#[import(cc = "device", name = " ")]             fn bitcast_channel[T]( &mut channel1[T]) -> [T * 2];

fn @hls_accelerator(dev: i32) = Accelerator {
    exec = @|body| |_grid, _block| {
        let work_item = WorkItem {
            tidx  = @|| 0, tidy  = @|| 0, tidz  = @|| 0,
            bidx  = @|| 0, bidy  = @|| 0, bidz  = @|| 0,
            gidx  = @|| 0, gidy  = @|| 0, gidz  = @|| 0,
            bdimx = @|| 1, bdimy = @|| 1, bdimz = @|| 1,
            gdimx = @|| 1, gdimy = @|| 1, gdimz = @|| 1,
            nblkx = @|| 1, nblky = @|| 1, nblkz = @|| 1
        };
        hls(dev, || @body(work_item));
    },
    sync          = @|| synchronize_hls(dev),
    alloc         = @|size| alloc_hls(dev, size),
    alloc_unified = @|size| alloc_hls_unified(dev, size),
    barrier       = @|| ()
};

static hls_intrinsics = Intrinsics {
    expf        = hls_expf,
    exp2f       = hls_exp2f,
    logf        = hls_logf,
    log2f       = hls_log2f,
    powf        = hls_powf,
    rsqrtf      = hls_rsqrtf,
    sqrtf       = hls_sqrtf,
    fabsf       = hls_fabsf,
    sinf        = hls_sinf,
    cosf        = hls_cosf,
    tanf        = hls_tanf,
    asinf       = hls_asinf,
    acosf       = hls_acosf,
    atanf       = hls_atanf,
    erff        = hls_erff,
    atan2f      = hls_atan2f,
    copysignf   = hls_copysignf,
    fmaf        = hls_fmaf,
    fmaxf       = hls_fmaxf,
    fminf       = hls_fminf,
    fmodf       = hls_fmodf,
    floorf      = hls_floorf,
    isinff      = hls_isinff,
    isnanf      = hls_isnanf,
    isfinitef   = hls_isfinitef,
    exp         = hls_exp,
    exp2        = hls_exp2,
    log         = hls_log,
    log2        = hls_log2,
    pow         = hls_pow,
    rsqrt       = hls_rsqrt,
    sqrt        = hls_sqrt,
    fabs        = hls_fabs,
    sin         = hls_sin,
    cos         = hls_cos,
    tan         = hls_tan,
    asin        = hls_asin,
    acos        = hls_acos,
    atan        = hls_atan,
    erf         = hls_erf,
    atan2       = hls_atan2,
    copysign    = hls_copysign,
    fma         = hls_fma,
    fmax        = hls_fmax,
    fmin        = hls_fmin,
    fmod        = hls_fmod,
    floor       = hls_floor,
    isinf       = hls_isinf,
    isnan       = hls_isnan,
    isfinite    = hls_isfinite,
    min         = hls_min,
    max         = hls_max,
};

extern "C" {
    //fn "sinf"             cpu_sinf(f32) -> f32;
    //fn "cosf"             cpu_cosf(f32) -> f32;
    fn "tanf"             cpu_tanf(f32) -> f32;
    fn "asinf"            cpu_asinf(f32) -> f32;
    fn "acosf"            cpu_acosf(f32) -> f32;
    fn "atanf"            cpu_atanf(f32) -> f32;
    fn "erff"             cpu_erff(f32) -> f32;
    fn "fmodf"            cpu_fmodf(f32, f32) -> f32;
    fn "atan2f"           cpu_atan2f(f32, f32) -> f32;
    fn "anydsl_isinff"    cpu_isinff(f32) -> i32;
    fn "anydsl_isnanf"    cpu_isnanf(f32) -> i32;
    fn "anydsl_isfinitef" cpu_isfinitef(f32) -> i32;
    //fn "sin"              cpu_sin(f64) -> f64;
    //fn "cos"              cpu_cos(f64) -> f64;
    fn "tan"              cpu_tan(f64) -> f64;
    fn "asin"             cpu_asin(f64) -> f64;
    fn "acos"             cpu_acos(f64) -> f64;
    fn "atan"             cpu_atan(f64) -> f64;
    fn "erf"              cpu_erf(f64) -> f64;
    fn "fmod"             cpu_fmod(f64, f64) -> f64;
    fn "atan2"            cpu_atan2(f64, f64) -> f64;
    fn "anydsl_isinf"     cpu_isinf(f64) -> i32;
    fn "anydsl_isnan"     cpu_isnan(f64) -> i32;
    fn "anydsl_isfinite"  cpu_isfinite(f64) -> i32;
}

extern "device" {
    fn "llvm.exp.f32"         cpu_expf(f32) -> f32;
    fn "llvm.exp2.f32"        cpu_exp2f(f32) -> f32;
    fn "llvm.log.f32"         cpu_logf(f32) -> f32;
    fn "llvm.log2.f32"        cpu_log2f(f32) -> f32;
    fn "llvm.pow.f32"         cpu_powf(f32, f32) -> f32;
    fn "llvm.sqrt.f32"        cpu_sqrtf(f32) -> f32;
    fn "llvm.fabs.f32"        cpu_fabsf(f32) -> f32;
    fn "llvm.sin.f32"         cpu_sinf(f32) -> f32;
    fn "llvm.cos.f32"         cpu_cosf(f32) -> f32;
    fn "llvm.floor.f32"       cpu_floorf(f32) -> f32;
    fn "llvm.fma.f32"         cpu_fmaf(f32, f32, f32) -> f32;
    fn "llvm.fmuladd.f32"     cpu_madf(f32, f32, f32) -> f32;
    fn "llvm.copysign.f32"    cpu_copysignf(f32, f32) -> f32;
    fn "llvm.minnum.f32"      cpu_fminf(f32, f32) -> f32;
    fn "llvm.maxnum.f32"      cpu_fmaxf(f32, f32) -> f32;
    fn "llvm.exp.f64"         cpu_exp(f64) -> f64;
    fn "llvm.exp2.f64"        cpu_exp2(f64) -> f64;
    fn "llvm.log.f64"         cpu_log(f64) -> f64;
    fn "llvm.log2.f64"        cpu_log2(f64) -> f64;
    fn "llvm.pow.f64"         cpu_pow(f64, f64) -> f64;
    fn "llvm.sqrt.f64"        cpu_sqrt(f64) -> f64;
    fn "llvm.fabs.f64"        cpu_fabs(f64) -> f64;
    fn "llvm.sin.f64"         cpu_sin(f64) -> f64;
    fn "llvm.cos.f64"         cpu_cos(f64) -> f64;
    fn "llvm.floor.f64"       cpu_floor(f64) -> f64;
    fn "llvm.fma.f64"         cpu_fma(f64, f64, f64) -> f64;
    fn "llvm.fmuladd.f64"     cpu_mad(f64, f64, f64) -> f64;
    fn "llvm.copysign.f64"    cpu_copysign(f64, f64) -> f64;
    fn "llvm.minnum.f64"      cpu_fmin(f64, f64) -> f64;
    fn "llvm.maxnum.f64"      cpu_fmax(f64, f64) -> f64;
    fn "llvm.ctpop.i32"       cpu_popcount32(i32) -> i32;
    fn "llvm.ctpop.i64"       cpu_popcount64(i64) -> i64;
    fn "llvm.ctlz.i32"        cpu_clz32(i32, bool) -> i32;
    fn "llvm.ctlz.i64"        cpu_clz64(i64, bool) -> i64;
    fn "llvm.cttz.i32"        cpu_ctz32(i32, bool) -> i32;
    fn "llvm.cttz.i64"        cpu_ctz64(i64, bool) -> i64;
    fn "llvm.x86.bmi.pext.32" cpu_pext32(i32, i32) -> i32;
    fn "llvm.x86.bmi.pext.64" cpu_pext64(i64, i64) -> i64;
    fn "llvm.x86.bmi.pdep.32" cpu_pdep32(i32, i32) -> i32;
    fn "llvm.x86.bmi.pdep.64" cpu_pdep64(i64, i64) -> i64;
    fn "llvm.prefetch"        cpu_prefetch(&u8, i32, i32, i32) -> ();
}

// kind: Xchg Add Sub And Nand Or Xor Max Min
fn cpu_atomic_xchg(a: &mut i32, b: i32) -> i32 { atomic(0u, a, b) }
fn cpu_atomic_add(a: &mut i32, b: i32) -> i32 { atomic(1u, a, b) }
fn cpu_atomic_sub(a: &mut i32, b: i32) -> i32 { atomic(2u, a, b) }
fn cpu_atomic_max(a: &mut i32, b: i32) -> i32 { atomic(7u, a, b) }
fn cpu_atomic_min(a: &mut i32, b: i32) -> i32 { atomic(8u, a, b) }

fn cpu_rsqrtf(a: f32) -> f32 { 1.0f / cpu_sqrtf(a) }
fn cpu_rsqrt(a: f64) -> f64 { 1.0 / cpu_sqrt(a) }

fn cpu_min(a: i32, b: i32) -> i32 { if a < b { a } else { b } }
fn cpu_max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }

static cpu_intrinsics = Intrinsics {
    expf        : cpu_expf,
    exp2f       : cpu_exp2f,
    logf        : cpu_logf,
    log2f       : cpu_log2f,
    powf        : cpu_powf,
    rsqrtf      : cpu_rsqrtf,
    sqrtf       : cpu_sqrtf,
    fabsf       : cpu_fabsf,
    sinf        : cpu_sinf,
    cosf        : cpu_cosf,
    tanf        : cpu_tanf,
    asinf       : cpu_asinf,
    acosf       : cpu_acosf,
    atanf       : cpu_atanf,
    erff        : cpu_erff,
    atan2f      : cpu_atan2f,
    copysignf   : cpu_copysignf,
    fmaf        : cpu_fmaf,
    fmaxf       : cpu_fmaxf,
    fminf       : cpu_fminf,
    fmodf       : cpu_fmodf,
    floorf      : cpu_floorf,
    isinff      : cpu_isinff,
    isnanf      : cpu_isnanf,
    isfinitef   : cpu_isfinitef,
    exp         : cpu_exp,
    exp2        : cpu_exp2,
    log         : cpu_log,
    log2        : cpu_log2,
    pow         : cpu_pow,
    rsqrt       : cpu_rsqrt,
    sqrt        : cpu_sqrt,
    fabs        : cpu_fabs,
    sin         : cpu_sin,
    cos         : cpu_cos,
    tan         : cpu_tan,
    asin        : cpu_asin,
    acos        : cpu_acos,
    atan        : cpu_atan,
    erf         : cpu_erf,
    atan2       : cpu_atan2,
    copysign    : cpu_copysign,
    fma         : cpu_fma,
    fmax        : cpu_fmax,
    fmin        : cpu_fmin,
    fmod        : cpu_fmod,
    floor       : cpu_floor,
    isinf       : cpu_isinf,
    isnan       : cpu_isnan,
    isfinite    : cpu_isfinite,
    min         : cpu_min,
    max         : cpu_max,
};
